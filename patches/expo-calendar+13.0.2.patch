diff --git a/node_modules/expo-calendar/build/Calendar.d.ts b/node_modules/expo-calendar/build/Calendar.d.ts
index ed52e7c..8fcfb50 100644
--- a/node_modules/expo-calendar/build/Calendar.d.ts
+++ b/node_modules/expo-calendar/build/Calendar.d.ts
@@ -646,7 +646,7 @@ export declare function deleteAttendeeAsync(id: string): Promise<void>;
  * @return A promise which fulfils with an array of [`Reminder`](#reminder) objects matching the search criteria.
  * @platform ios
  */
-export declare function getRemindersAsync(calendarIds: (string | null)[], status: ReminderStatus | null, startDate: Date, endDate: Date): Promise<Reminder[]>;
+export declare function getRemindersAsync(calendarIds: (string | null)[], status: ReminderStatus | null, startDate?: Date, endDate?: Date): Promise<Reminder[]>;
 /**
  * Returns a specific reminder selected by ID.
  * @param id ID of the reminder to return.
diff --git a/node_modules/expo-calendar/ios/CalendarModule.swift b/node_modules/expo-calendar/ios/CalendarModule.swift
index 82c1d92..61266e7 100644
--- a/node_modules/expo-calendar/ios/CalendarModule.swift
+++ b/node_modules/expo-calendar/ios/CalendarModule.swift
@@ -179,7 +179,7 @@ public class CalendarModule: Module {
       return serialize(attendees: attendees)
     }
 
-    AsyncFunction("getRemindersAsync") { (startDateStr: String, endDateStr: String, calendarIds: [String?], status: String?, promise: Promise) in
+    AsyncFunction("getRemindersAsync") { (startDateStr: String?, endDateStr: String?, calendarIds: [String?], status: String?, promise: Promise) in
       try checkRemindersPermissions()
       var reminderCalendars = [EKCalendar]()
       let startDate = parse(date: startDateStr)
@@ -196,14 +196,21 @@ public class CalendarModule: Module {
         reminderCalendars = deviceCalendars
       }
 
-      let predicate = try createPredicate(for: reminderCalendars, start: startDate, end: endDate, status: status)
-      eventStore.fetchReminders(matching: predicate) { [promise] reminders in
-        if let reminders {
-          promise.resolve(serialize(reminders: reminders))
+        var predicate: NSPredicate
+        if let start = startDate, let end = endDate {
+            predicate = try createPredicate(for: reminderCalendars, start: start, end: end, status: status)
         } else {
-          promise.resolve([])
+            predicate = eventStore.predicateForReminders(in: reminderCalendars)
         }
-      }
+
+        eventStore.fetchReminders(matching: predicate) { [promise] reminders in
+            if let reminders = reminders {
+                promise.resolve(serialize(reminders: reminders))
+            } else {
+                promise.resolve([])
+            }
+        }
+
     }
 
     AsyncFunction("getReminderByIdAsync") { (reminderId: String) -> [String: Any?]  in
